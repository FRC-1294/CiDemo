buildscript {
  repositories {
	mavenCentral()
	maven {
		name = "GradleRIO"
		url = "http://dev.imjac.in/maven"
	}
  }
  dependencies {
    classpath group: 'jaci.openrio.gradle', name: 'GradleRIO', version: '2.0.1'			//Change this line if you wish to Update GradleRIO
    classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.5.2'
    classpath 'commons-io:commons-io:2.4'
    classpath 'org.ajoberstar:grgit:1.4.1'
  }
}

plugins {
    id "com.jfrog.bintray" version "1.4"
    id 'org.ajoberstar.grgit' version '1.3.2'
    id 'org.ajoberstar.release-opinion' version '1.3.2'
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'GradleRIO'
apply plugin: 'org.ajoberstar.release-opinion'
apply plugin: 'maven-publish'

gradlerio.robotClass = "org.usfirst.frc.team1294.robot.Robot"   //The class for the main Robot Class. Used in manifest
gradlerio.team = "1294"                                   //Your FRC team number (e.g. 5333 for team 'Can't C#', or 47 for Chief Delphi)
//gradlerio.rioIP = "10.53.33.20"                         //Uncomment to specify the IP address of the RIO


dependencies {
	compile files(System.properties['user.home'] + '/wpilib/java/extracted/library/lib/NetworkTables.jar')
	compile files(System.properties['user.home'] + '/wpilib/java/extracted/library/lib/WPILib.jar')
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId 'org.usfirst.frc.team1294'
            artifactId 'CiDemo'
            version project.version.toString()
        }
    }
}

bintray {
	user = project.hasProperty('BINTRAY_USER') ? project.getProperty('BINTRAY_USER') : System.getenv('BINTRAY_USER')
	key = project.hasProperty('BINTRAY_KEY') ? project.getProperty('BINTRAY_KEY') : System.getenv('BINTRAY_KEY')
    publications = ['MyPublication']
    publish = true
    pkg {
        repo = 'FRC-1294'
        name = 'CiDemo'
        userOrg = 'johnrudolflewis'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/FRC-1294/CiDemo.git'
        version {
        	name = project.version.toString()
        }
    }
}

jar { 
  manifest {
    attributes 'Main-Class': 'edu.wpi.first.wpilibj.RobotBase'
    attributes 'Robot-Class': gradlerio.robotClass
    attributes 'Version' : project.version.toString()
    attributes 'Author' : getAuthor()
  }
  from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

release {
  // need to specify the repository to interact with
  grgit = org.ajoberstar.grgit.Grgit.open(project.file('.')) 
}

def getAuthor() {
  def author = "unknown"
  grgit = org.ajoberstar.grgit.Grgit.open(project.file('.')) 
  if (grgit.status().isClean()) {
    def history = grgit.log(maxCommits: 1)
    author = "${history.author.name[0]} <${history.author.email[0]}>"
  } else {
    author = System.env.USER ?: System.env.USERNAME
  }
  return author
}




/*

import java.io.*
import groovyx.net.http.HTTPBuilder
import groovyx.net.http.EncoderRegistry
import groovyx.net.http.Method;
import groovyx.net.http.ContentType;

import org.apache.commons.io.FilenameUtils;
import java.nio.file.CopyOption;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import org.ajoberstar.grgit.*

import groovy.json.JsonSlurper

def downloadReleases() {
	println "Checking bintray for releases"
	File folder = new File("$buildDir/releases")
	folder.mkdirs()
	def http = new HTTPBuilder("https://bintray.com/api/v1/packages/johnrudolflewis/FRC-1294/CiDemo")
	http.request(Method.GET, ContentType.TEXT ) { req ->
		headers.'Accept' = 'application/json'
	    response.success = { resp, reader ->
	        def json = new JsonSlurper().parseText(reader.text)
	        json.each {
	        	if (it.assets[0] != null) {
	        		File output = new File("$buildDir/releases/${it.tag_name}.jar")
	        		if (output.exists()) { 
	        			println "Already have ${it.tag_name}, skipping."
	        		} else {
	        			println "Downloading ${it.tag_name}"
		    			def file = new FileOutputStream(output)
		    			def out = new BufferedOutputStream(file)
		    			out << new URL(it.assets[0].browser_download_url).openStream()
		    			out.close()
	    			}
        		}
	        }
	    }
	}
}

def downloadReleasesTask = project.task('downloadReleases') << {
      downloadReleases()
}

def deployRelease() {
	File releaseFolder = new File("$buildDir/releases")
	def releases = releaseFolder.listFiles().sort(false).reverse()
	
	def console = System.console()
	if (console) {
		console.writer().println("\n\nAvailable Releases:")
		releases.eachWithIndex { it, i ->
			console.writer().println("[$i]: ${FilenameUtils.removeExtension(it.getName())}")
		}
		def releaseIndex = (console.readLine("Which release would you like to deploy? [0]")?:0).toInteger()
		def releasePath = releases[releaseIndex].toPath()
		
		try {
			def host = "roboRIO-${project.gradlerio.team}.local"
			println "Attempting to send new code to RoboRIO..."
	
		    project.ant.scp(file: "${releasePath}",
		    todir:"lvuser@${host}:${project.gradlerio.deployFile}",
		    password:"",
		    port:22,
		    trust:true)
		
		    println "Deploy Successful! Loaded in: ${project.gradlerio.deployFile}"
		    
		    println "Attempting to restart the RoboRIO code..."
		    project.ant.sshexec(host: "${host}",
		    username:"lvuser",
		    port:22,
		    trust:true,
		    password:"",
		    command:"/etc/profile.d/natinst-path.sh; /usr/local/frc/bin/frcKillRobot.sh -t -r"
		    )
		    println "Robot Code is restarting..."
		    
	    } catch (Exception ex) {
	    	println "RoboRIO not available... Falling back to IP..."
	    	String ip = project.gradlerio.rioIP
		    if (ip == "{DEFAULT}") {
		      String team = project.gradlerio.team
		      int length = team.length();
		      if (length < 4)
		      for (int i = 0; i < 4 - length; i++)
		      team = "0" + team;
		
		      ip = "10." + team.substring(0, 2) + "." + team.substring(2, 4) + ".20"
		    }
		    
		    println "Attempting to send new code to RoboRIO..."
	
		    project.ant.scp(file: "${releasePath}",
		    todir:"lvuser@${ip}:${project.gradlerio.deployFile}",
		    password:"",
		    port:22,
		    trust:true)
		
		    println "Deploy Successful! Loaded in: ${project.gradlerio.deployFile}"
		    
		    println "Attempting to restart the RoboRIO code..."
		    project.ant.sshexec(host: "${ip}",
		    username:"lvuser",
		    port:22,
		    trust:true,
		    password:"",
		    command:"/etc/profile.d/natinst-path.sh; /usr/local/frc/bin/frcKillRobot.sh -t -r"
		    )
		    println "Robot Code is restarting..."
		    
	    }
	}
	
}

def deployReleaseTask = project.task('deployRelease') << {
      deployRelease()
}

*/

task wrapper(type: Wrapper) {
   gradleVersion = '2.4' //version required
}

