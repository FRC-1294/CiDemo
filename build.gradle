import java.io.*
import groovyx.net.http.HTTPBuilder
import groovyx.net.http.EncoderRegistry
import groovyx.net.http.Method;
import groovyx.net.http.ContentType;
import groovy.json.JsonSlurper

buildscript {
  repositories {
	mavenCentral()
	maven {
		name = "GradleRIO"
		url = "http://dev.imjac.in/maven"
	}
  }
  dependencies {
    classpath group: 'jaci.openrio.gradle', name: 'GradleRIO', version: '2.0.1'			//Change this line if you wish to Update GradleRIO
    classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.5.2'
  }
}

plugins {
  id "org.10ne.rest" version "0.4.0"
}

apply plugin: 'GradleRIO'                                 //Apply the GradleRIO plugin
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

gradlerio.robotClass = "org.usfirst.frc.team1294.robot.Robot"   //The class for the main Robot Class. Used in manifest
gradlerio.team = "1294"                                   //Your FRC team number (e.g. 5333 for team 'Can't C#', or 47 for Chief Delphi)
//gradlerio.rioIP = "10.53.33.20"                         //Uncomment to specify the IP address of the RIO


dependencies {
	compile files(System.properties['user.home'] + '/wpilib/java/extracted/library/lib/NetworkTables.jar')
	compile files(System.properties['user.home'] + '/wpilib/java/extracted/library/lib/WPILib.jar')
}

def robotManifest = {
  attributes 'Main-Class': 'edu.wpi.first.wpilibj.RobotBase'
  attributes 'Robot-Class': gradlerio.robotClass
  attributes 'Class-Path': '.'
  try {
	  def branch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
	  def revision = 'git rev-list --max-count 1 --timestamp HEAD'.execute().text.trim()
	  def commitHash = revision.split(' ').last()
	  def timestamp = revision ? new java.util.Date(java.util.concurrent.TimeUnit.SECONDS.toMillis(revision.split(' ').first() as long)).format("yyyy-MM-dd'T'HH:mm:ssZ") : null
	  def tag = 'git describe'.execute().text.trim()
	  def log = 'git log -1'.execute().text.trim()
	  def author = (log =~ /(?m).*^.*Author: (.*)$/)[0][1]
	  
	  attributes 'Git-Branch' : branch
	  attributes 'Git-Hash' : commitHash
	  attributes 'Git-Timestamp' : timestamp
	  attributes 'Git-Tag' : tag
	  attributes 'Git-Author' : author
  } catch (Exception ex) {
   
  }
}


def getReleaseJarUrl(tag) {
	def releaseJarUrl = null;
	try {
		def http = new HTTPBuilder("https://api.github.com/repos/FRC-1294/CiDemo/releases")
		http.request(Method.GET, ContentType.TEXT ) { req ->
			headers.'User-Agent' = 'johnrlewis@gmail.com'
			headers.'Accept' = 'application/json'
		    response.success = { resp, reader ->
		        def json = new JsonSlurper().parseText(reader.text)
		        def release = json.find { it.tag_name == tag }
		        releaseJarUrl = release.assets[0].browser_download_url
		    }
		}
	} catch (Exception ex) {
		
	}
	return releaseJarUrl
}

def getLatestReleaseJarUrl() {
	def releaseJarUrl = null;
	try {
		def http = new HTTPBuilder("https://api.github.com/repos/FRC-1294/CiDemo/releases/latest")
		http.request(Method.GET, ContentType.TEXT ) { req ->
			headers.'User-Agent' = 'johnrlewis@gmail.com'
			headers.'Accept' = 'application/json'
		    response.success = { resp, reader ->
		        def json = new JsonSlurper().parseText(reader.text)
		        releaseJarUrl = json.assets[0].browser_download_url
		    }
		}
	} catch (Exception ex) {
		
	}
	return releaseJarUrl
}

def getReleases() {
	def tags = []
	try {
		def http = new HTTPBuilder("https://api.github.com/repos/FRC-1294/CiDemo/releases")
		http.request(Method.GET, ContentType.TEXT ) { req ->
			headers.'User-Agent' = 'johnrlewis@gmail.com'
			headers.'Accept' = 'application/json'
		    response.success = { resp, reader ->
		        def json = new JsonSlurper().parseText(reader.text)
		        json.each { tags.push(it.tag_name) }
		    }
		}
	} catch (Exception ex) {
		
	}
	return tags
}



def deployRelease() {
	def console = System.console()
	if (console) {
		console.writer().println()
		console.writer().println()
		def deployFromGithub = (console.readLine('Would you like to deploy a release from github? [Yes]')?:true).toBoolean()
		if (deployFromGithub) {
			def deployLatest = (console.readLine('Would you like to deploy the latest release? [Yes]')?:true).toBoolean()
			if (deployLatest) {
				println getLatestReleaseJarUrl()
			} else {
				def tags = getReleases()
				tags.eachWithIndex { tag, idx ->  println "$idx: $tag" }
				def tagIndex = (console.readLine('Which release would you like to deploy? [0]')?:0).toInteger()
				
				println getReleaseJarUrl(tags[tagIndex])
			}
		} else {
			println('false')
		}
		
	}
	
	//println "Blah ${project.jar.archivePath} ${project.gradlerio.deployFile}"
}

def deployReleaseTask = project.task('deployRelease') << {
      deployRelease()
    }

jar {
  from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  manifest robotManifest
}


task genJavadoc(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives genJavadoc
}

task wrapper(type: Wrapper) {
   gradleVersion = '2.4' //version required
}

